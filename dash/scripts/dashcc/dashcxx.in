#!/usr/bin/env bash

###################################################
# Compiler wrapper for the DASH C++ PGAS          #
# framework.                                      #
# The wrapper is used similar to mpicxx and the   #
# like to ensure that the correct include         #
# paths and libraries are passed to the compiler. #
#                                                 #
# Options:                                        #
#   --dash:verbose: print compiler invocation     #
#   --dash:nocppflags: do not pass DASH-related   #
#                      pre-processor macros       #
###################################################

DASH_VERBOSE=false
CXXFLAGS=""
CXX="@DASHCC@"
INSTALL_PREFIX="@CMAKE_INSTALL_PREFIX@"
COMPILE_ONLY=false
LINK_ONLY=true
DASH_NOCPPFLAGS=false
COMPILER_ARGS=""

function INVOKE_COMPILER() 
{
  if ${DASH_VERBOSE} ; then
    echo $@
  fi 

  exec $@
}

function CHECK_CMAKE_BOOL()
{
  if [ x"$1" == "xTRUE" -o x"$1" == x"ON" ] ; then 
    return 0;
  else 
    return 1;
  fi
}

function SPLIT_CMAKE_LIST()
{
  echo $@ | tr ';' ' '
}

function PARSE_CPPFLAGS()
{
  for flag in $@ ; do
    if ! ${DASH_NOCPPFLAGS} && [[ $flag == -DDASH* ]] ; then
      CXXFLAGS="$CXXFLAGS $flag"
    fi 
  done
}


##
# parse wrapper arguments
##
for arg in $@ ; do
  # check whether to linking is done
  if [ "$arg" == "-c" ] ; then
    COMPILE_ONLY=true
    LINK_ONLY=false
  fi
  # check for source files
  if [[ $arg == *\.cc || $arg == *\.cpp ]] ; then
    LINK_ONLY=false
  fi
  if [ "$arg" == "--dash:verbose" -o "$arg" == "-dash:verbose" ] ; then
    DASH_VERBOSE=true
  elif [ "$arg" == "--dash:nocppflags" -o "$arg" == "-dash:nocppflags" ] ; then
    DASH_NOCPPFLAGS=true
  else
    COMPILER_ARGS="$COMPILER_ARGS $arg"
  fi
done

##
# parse CMAKE_CXXFLAGS for macro definitions
# and set the language version flag
##

if ! ${LINK_ONLY} ; then
  CMAKE_BUILD_TYPE="@CMAKE_BUILD_TYPE@"
  CMAKE_CXXFLAGS="@CMAKE_CXX_FLAGS@"
  CMAKE_CXXFLAGS_RELEASE="@CMAKE_CXX_FLAGS_RELEASE@"
  CMAKE_CXXFLAGS_DEBUG="@CMAKE_CXX_FLAGS_DEBUG@"
  PARSE_CPPFLAGS ${CMAKE_CXXFLAGS}
  if [ x"${CMAKE_BUILD_TYPE}" == "xRelease" ]  ; then
    PARSE_CPPFLAGS ${CMAKE_CXXFLAGS_RELEASE}
  elif [ x"${CMAKE_BUILD_TYPE}" == "xDebug" ] ; then
    PARSE_CPPFLAGS ${CMAKE_CXXFLAGS_DEBUG}
  fi

  # add include path
  CXXFLAGS="$CXXFLAGS -I${INSTALL_PREFIX}/include"

  CXXFLAGS="${CXXFLAGS} @CXX_STD_FLAG@"
fi 

# assemble LDFLAGS only if linking is done

if ! ${COMPILE_ONLY} ; then

  LDFLAGS="@CMAKE_EXE_LINKER_FLAGS@ -L${INSTALL_PREFIX}/lib"
  DART_IMPL="@DART_IMPLEMENTATION@"
  if [ x"$DART_IMPL" != "xmpi" -a x"$DART_IMPL" != "xshmem" ] ; then
    echo "Unknown DART implementation!"
    exit 1
  fi

  LDFLAGS="${LDFLAGS} -ldash-${DART_IMPL} -ldart-${DART_IMPL} -ldart-base"
  
  ENABLE_PAPI="@ENABLE_PAPI@"
  PAPI_FOUND="@PAPI_FOUND@"
  if CHECK_CMAKE_BOOL $ENABLE_PAPI && CHECK_CMAKE_BOOL $PAPI_FOUND ; then
    LDFLAGS="${LDFLAGS} $(SPLIT_CMAKE_LIST @PAPI_LIBRARIES@)"
  fi

  ENABLE_NUMA="@ENABLE_LIBNUMA@"
  NUMA_FOUND="@NUMA_FOUND@"
  if CHECK_CMAKE_BOOL $ENABLE_NUMA &&  CHECK_CMAKE_BOOL $NUMA_FOUND ; then
    LDFLAGS="${LDFLAGS} $(SPLIT_CMAKE_LIST @NUMA_LIBRARIES@)"
  fi

  ENABLE_MKL="@ENABLE_MKL@"
  MKL_FOUND="@MKL_FOUND@"
  if CHECK_CMAKE_BOOL $ENABLE_MKL && CHECK_CMAKE_BOOL $MKL_FOUND ; then
    LDFLAGS="${LDFLAGS} $(SPLIT_CMAKE_LIST @MKL_LIBRARIES@)"
  fi

  ENABLE_HWLOC="@ENABLE_HWLOC@"
  HWLOC_FOUND="@HWLOC_FOUND@"
  if CHECK_CMAKE_BOOL $ENABLE_HWLOC && CHECK_CMAKE_BOOL $HWLOC_FOUND  ; then
    LDFLAGS="${LDFLAGS} $(SPLIT_CMAKE_LIST @HWLOC_LIBRARIES@)"
  fi

  ENABLE_HDF5="@ENABLE_HDF5@"
  HDF5_FOUND="@HDF5_FOUND@"
  if CHECK_CMAKE_BOOL $ENABLE_HDF5 && CHECK_CMAKE_BOOL $HDF5_FOUND ; then
    LDFLAGS="${LDFLAGS} $(SPLIT_CMAKE_LIST @HDF5_LIBRARIES@)"
  fi

  ENABLE_PLASMA="@ENABLE_PLASMA@"
  PLASMA_FOUND="@PLASMA_FOUND@"
  if CHECK_CMAKE_BOOL $ENABLE_PLASMA && CHECK_CMAKE_BOOL $PLASMA_FOUND ; then
    LDFLAGS="${LDFLAGS} $(SPLIT_CMAKE_LIST @PLASMA_LIBRARIES@)"
  fi

  ENABLE_SCALAPACK="@ENABLE_SCALAPACK@"
  SCALAPACK_FOUND="@SCALAPACK_FOUND@"
  if CHECK_CMAKE_BOOL $ENABLE_SCALAPACK && CHECK_CMAKE_BOOL $SCALAPACK_FOUND ; then
    LDFLAGS="${LDFLAGS} $(SPLIT_CMAKE_LIST @SCALAPACK_LIBRARIES@)"
  fi
fi

INVOKE_COMPILER $CXX $CXXFLAGS $COMPILER_ARGS $LDFLAGS
